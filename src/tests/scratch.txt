

      {
	glm::mat4 model = glm::translate(glm::mat4(1.0f), translationA);
	glm::mat4 mvp = proj * view * model;
	shader.Bind();
	shader.SetUniformMat4f("u_MVP", mvp);
	renderer.Draw(va, ib, shader);	
      }

      {
	glm::mat4 model = glm::translate(glm::mat4(1.0f), translationB);
	glm::mat4 mvp = proj * view * model;
	shader.Bind();
	shader.SetUniformMat4f("u_MVP", mvp);
	renderer.Draw(va, ib, shader);	
      }

      if (r > 1.0f){
	increment = -0.05f;
      } else if (r < 0.0f) {
	increment = 0.05f;
      }
      r += increment;
      {
	ImGui::SliderFloat3("Translation A", &translationA.x, 0.0f, 960.0f);            // Edit 1 float using a slider from 0.0f to 1.0f
	ImGui::SliderFloat3("Translation B", &translationB.x, 0.0f, 960.0f);            // Edit 1 float using a slider from 0.0f to 1.0f    
	ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
	
      }

 VertexArray va;

  VertexBuffer vb(positions, 4 * 4 * sizeof(float));
  VertexBufferLayout layout;
  layout.PushFloat(2);
  layout.PushFloat(2);
  va.addBuffer(vb, layout);

  IndexBuffer ib(indices, 6);

  glm::mat4 proj = glm::ortho(0.0f, 960.0f, 0.0f, 540.0f, -1.0f, 1.0f);

  glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f));

  Shader shader("./res/shaders/Basic.glsl");
  shader.Bind();

  
  
  Texture texture("res/textures/goku_kid.png");
  texture.Bind();
  shader.SetUniform1i("u_Texture", 0);  //0 corresponds to the texture slot
  va.Unbind();
  shader.Unbind();
  vb.Unbind();
  ib.Unbind();

